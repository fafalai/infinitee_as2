{
  "_args": [
    [
      {
        "raw": "tabtab@^2.2.2",
        "scope": null,
        "escapedName": "tabtab",
        "name": "tabtab",
        "rawSpec": "^2.2.2",
        "spec": ">=2.2.2 <3.0.0",
        "type": "range"
      },
      "/Users/ianwu/WebStormProjects/as1/node_modules/caporal"
    ]
  ],
  "_from": "tabtab@>=2.2.2 <3.0.0",
  "_id": "tabtab@2.2.2",
  "_inCache": true,
  "_location": "/tabtab",
  "_nodeVersion": "6.9.1",
  "_npmOperationalInternal": {
    "host": "packages-18-east.internal.npmjs.com",
    "tmp": "tmp/tabtab-2.2.2.tgz_1483712519254_0.8873393083922565"
  },
  "_npmUser": {
    "name": "mklabs",
    "email": "daniel.mickael@gmail.com"
  },
  "_npmVersion": "3.10.8",
  "_phantomChildren": {},
  "_requested": {
    "raw": "tabtab@^2.2.2",
    "scope": null,
    "escapedName": "tabtab",
    "name": "tabtab",
    "rawSpec": "^2.2.2",
    "spec": ">=2.2.2 <3.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/caporal"
  ],
  "_resolved": "https://registry.npmjs.org/tabtab/-/tabtab-2.2.2.tgz",
  "_shasum": "7a047f143b010b4cbd31f857e82961512cbf4e14",
  "_shrinkwrap": null,
  "_spec": "tabtab@^2.2.2",
  "_where": "/Users/ianwu/WebStormProjects/as1/node_modules/caporal",
  "author": {
    "name": "mklabs"
  },
  "bin": {
    "tabtab": "bin/tabtab"
  },
  "bugs": {
    "url": "https://github.com/mklabs/node-tabtab/issues"
  },
  "dependencies": {
    "debug": "^2.2.0",
    "inquirer": "^1.0.2",
    "lodash.difference": "^4.5.0",
    "lodash.uniq": "^4.5.0",
    "minimist": "^1.2.0",
    "mkdirp": "^0.5.1",
    "npmlog": "^2.0.3",
    "object-assign": "^4.1.0"
  },
  "description": "tab completion helpers, for node cli programs. Inspired by npm completion.",
  "devDependencies": {
    "babel-cli": "^6.7.5",
    "babel-plugin-add-module-exports": "^0.2.1",
    "babel-preset-es2015": "^6.6.0",
    "eslint": "^2.8.0",
    "gentle-cli": "^1.0.3",
    "jscs": "^3.0.3",
    "mocha": "^2.4.5",
    "standard-version": "^2.1.2",
    "watchd": "^1.0.0"
  },
  "directories": {},
  "dist": {
    "shasum": "7a047f143b010b4cbd31f857e82961512cbf4e14",
    "tarball": "https://registry.npmjs.org/tabtab/-/tabtab-2.2.2.tgz"
  },
  "gitHead": "fcb0a3662e0b611bf82959ebd3b67604712eeddd",
  "homepage": "https://github.com/mklabs/node-tabtab#readme",
  "keywords": [
    "terminal",
    "tab",
    "unix",
    "console",
    "complete",
    "completion"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "mklabs",
      "email": "daniel.mickael@gmail.com"
    }
  ],
  "name": "tabtab",
  "optionalDependencies": {},
  "readme": "# tabtab [![Build Status](https://secure.travis-ci.org/mklabs/node-tabtab.png)](http://travis-ci.org/mklabs/node-tabtab)\n\nA node package to do some custom command line`<tab><tab>` completion for any\nsystem command, for Bash, Zsh, and Fish shells.\n\nMade possible using the same technique as npm (whose completion is quite\nawesome) relying on a shell script bridge to do the actual completion from\nnode's land.\n\n---\n\n- Supports **zsh**, **fish** and **bash**\n- CLI tool to manage and discover completion.\n- Automatic completion from `package.json` config\n- Or using an EventEmitter based API\n- Manual or Automatic installation using system dirs (ex. `/usr/share/bash-completion/completions` for bash).\n- A way to install completion script for a given shell on `npm install`, gently\n  asking the user for install location.\n  - `tabtab install` in package.json install script creates the completion file on user system.\n\n---\n\n<!-- toc -->\n* [Install](#install)\n* [Documentation](#documentation)\n  * [API](#api)\n  * [Completion description](#completion-description)\n  * [package.json](#packagejson)\n* [Completions](#completions)\n  * [Manual Installation](#manual-installation)\n  * [Automatic Installation](#automatic-installation)\n    * [npm script:install](#npm-scriptinstall)\n  * [Completion for other programs](#completion-for-other-programs)\n    * [nvm](#nvm)\n    * [Bower](#bower)\n    * [Yeoman](#yeoman)\n* [CLI](#cli)\n  * [tabtab install](#tabtab-install)\n  * [tabtab uninstall](#tabtab-uninstall)\n* [Credits](#credits)\n\n<!-- toc stop -->\n\n## Install\n\n    npm install tabtab --save\n\n## Documentation\n\n### API\n\nYou can add completion pretty easily in your node cli script:\n\n```js\n#! /usr/bin/env node\n\n// Ex. bin/ entry point for a \"program\" package\nvar tab = require('tabtab')({\n  name: 'program'\n});\n\n// General handler. Gets called on `program <tab>` and `program stuff ... <tab>`\ntab.on('program', function(data, done) {\n  // General handler\n  done(null, ['foo', 'bar']);\n});\n\n// Specific handler. Gets called on `program list <tab>`\ntab.on('list', function(data, done) {\n  done(null, ['file.js', 'file2.js']);\n});\n\n// Start must be called to register the completion commands and listen for\n// completion.\ntab.start();\n```\n\nThese events are emitted whenever the command `program completion -- ..` is\ntriggered, with special `COMP_*` environment variables.\n\n`tab.start()` will define one command: `completion` for your program, which is\nused by the Shell completion scripts.\n\nThe `data` object holds interesting value to drive the output of the\ncompletion:\n\n* `line`: full command being completed\n* `words`: number of word\n* `point`: cursor position\n* `partial`: tabing in the middle of a word: foo bar baz bar foobar<tab><tab>rrrrrr\n* `last`: last word of the line\n* `lastPartial`: last partial of the line\n* `prev`: the previous word\n\n#### Options\n\n```js\nvar tab = require('tabtab')({\n  // the String package name being completed, defaults to process.title\n  // (if not node default) or will attempt to determine parent's\n  // package.json location and extract the name from it.\n  name: 'foobar'\n\n  // Enable / Disable cache (defaults: true)\n  cache: true,\n\n  // Cache Time To Live duration in ms (default: 5min)\n  ttl: 1000 * 60 * 5\n});\n```\n\nCompletion results are cached by default, for a duration of 5 minutes. Caching\nis based on the value of the full command being completed (`data.line`).\n\n### Completion description\n\nOnly supported with zsh or fish, tabtab offers the ability to define per command / options description by adding them preceded by a colon, in the form of:\n\n```js\n'command:description for command'\n````\n\nThis way, you can define descriptions for a specific completion item and tabtab will configure zsh / fish to show them right to the completion item.\n\nExample for zsh\n\n```shell\n$ program <tab>\ncommand     - description for command\n````\n\nExample for fish\n\n```fish\n$ program <tab>\ncommand     (description for command)\n```\n\n### package.json\n\nWhile the EventEmitter API can offer fine control over what gets completed,\ncompletion values can be defined directly in the `package.json` file, using the\n`tabtab` property:\n\n```js\n{\n  \"tabtab\": {\n    \"nvm\": [\"help\", \"use\", \"install\", \"uninstall\", \"run\", \"current\", \"ls\", \"ls-remote\"],\n    \"use\": [\"stable\", \"default\", \"iojs\", \"v5.11.0\", \"v6.0.0\"]\n  }\n}\n```\n\nThis still requires to initialize tabtab with:\n\n```js\nrequire('tabtab')().start();\n```\n\n## Completions\n\nFor any installation method described below, be sure to reload your current\nshell configuration file by sourcing it (ex. for bash: `source ~/.bashrc`), or\nopening a new shell.\n\n### Manual Installation\n\nManually loading the completion for your cli app is done very much [like npm\ndoes](https://docs.npmjs.com/cli/completion):\n\n    . <(tabtab install --stdout --name program)\n\nIt'll enables tab-completion for the `program` executable. Adding it to your\n~/.bashrc or ~/.zshrc will make the completions available everywhere (not only\nthe current shell).\n\n    tabtab install --stdout --name program >> ~/.bashrc # or ~/.zshrc\n\nThis requires an additional manual step for the user. Ideally we'd want it to\nbe automatic, and define it at a system-level.\n\n### Automatic Installation\n\nFor completions to be active for a particular command/program, the user shell\n(bash, zsh or fish) must load a specific file when the shell starts.\n\nEach shell have its own system, and different loading paths. `tabtab` tries to\nfigure out the most appropriate directory depending on the `$SHELL` variable.\n\n- **fish**  Uses `~/.config/fish/completions`\n- **zsh**  Uses `/usr/local/share/zsh/site-functions`\n- **bash** Asks `pkg-config` for completion directories if bash-completion is\n  installed (defaults to `/usr/share/bash-completion/completions` and\n  `/etc/bash_completion.d`)\n\n`tabtab` CLI provides an `install` command to ease the process of installing a\ncompletion script when the package is installed on the user system, using npm\nscript.\n\n#### npm script:install\n\nUsing npm's install/uninstall script, you can automatically manage completion\nfor your program whenever it gets globally installed or removed.\n\n```json\n{\n  \"scripts\": {\n    \"install\": \"tabtab install\"\n  }\n}\n```\n\nOn install, npm will execute the `tabtab install` command automatically in the\ncontext of your package.\n\nEx.\n\n```json\n{\n  \"name\": \"foobar\",\n  \"bin\": \"bin/foobar\",\n  \"scripts\": {\n    \"install\": \"tabtab install\"\n  },\n  \"dependencies\": {\n    \"tabtab\": \"^1.0.0\"\n  }\n}\n```\n\nNothing is done's without asking confirmation, `tabtab install` looks at the\n`$SHELL` variable to determine the best possible locations and uses\n[Inquirer](https://github.com/SBoudrias/Inquirer.js/) to ask the user what it\nshould do:\n\n![bash](./docs/img/bash-install.png)\n![zsh](./docs/img/zsh-install.png)\n![fish](./docs/img/fish-install.png)\n\n#### tabtab install --auto\n\nThe `--auto` flag can be used to bypass prompts and use the SHELL configuration file options by default:\n\n- bash: Will use `~/.bashrc`\n- zsh: Will use `~/.zshrc`\n- bash: Will use `~/.config/fish/config.fish`\n\nThis way, you can silently install / uninstall completion for a specific command without asking user to do so.\n\n### tabtab uninstall --auto\n\nThe uninstall command can be used to undo what has been done by `tabtab install --auto` command.\n\n### Completion for other programs\n\n#### nvm\n\nThe `--completer` option allows you to delegate the completion part to another\nprogram. Let's take nvm as an example.\n\nThe idea is to create a package named `nvm-complete`, with an executable that\nloads `tabtab` and handle the completion output of `nvm-complete completion`.\n\n```json\n{\n  \"name\": \"nvm-complete\",\n  \"bin\": \"./index.js\",\n  \"scripts\": {\n    \"install\": \"tabtab install --name nvm --completer nvm-complete\"\n  },\n  \"dependencies\": {\n    \"tabtab\": \"^1.0.0\"\n  }\n}\n```\n\n```js\n// index.js\nvar tabtab = require('tabtab');\n\ntabtab.on('nvm', function(data, done) {\n  return done(null, ['ls', 'ls-remote', 'install', 'use', ...]);\n});\n\ntabtab.start();\n```\n\nAlternatively, we can use tabtab property in package.json file to define static\nlist of completion results:\n\n```json\n{\n  \"tabtab\": {\n    \"nvm\": [\"help\", \"use\", \"install\", \"uninstall\", \"run\", \"current\", \"ls\", \"ls-remote\"],\n    \"use\": [\"stable\", \"default\", \"iojs\", \"v5.11.0\", \"v6.0.0\"]\n  }\n}\n```\n\nFor more control over the completion results, the JS api is useful for\nreturning specific values depdending on preceding words, like completing each\nnode versions on `nvm install <tab>`.\n\n```js\nvar exex = require('child_process').exec;\n\n// To cache the list of versions returned by ls-remote\nvar versions = [];\ntabtab.on('install', function(data, done) {\n  if (versions.length) return done(null, versions);\n\n  // Ask nvm the list of remote, and return each as a completion item\n  exec('nvm ls-remote', function(err, stdout) {\n    if (err) return done(err);\n    versions = versions.concat(stdout.split(/\\n/));\n    return done(null, versions);\n  });\n});\n```\n\nOn global installation of `nvm-complete`, the user will be asked for\ninstallation instruction (output to stdout, write to shell config, or a system\ndir). The completion should be active on reload or next login (close / reopen\nyour terminal).\n\n#### Bower\n\n**[examples/bower-complete](./examples/bower-complete#readme)**\n\n![bower-complete](http://i.imgur.com/KH3VQWU.png)\n\n#### Yeoman\n\n**[examples/yo-complete](./examples/yo-complete#readme)**\n\n![yo](http://i.imgur.com/LQYxCbZ.png)\n\n![yo](http://i.imgur.com/yCjK3tJ.png)\n\n### Debugging completion\n\nOn completion trigger (hitting tab), any STDOUT output is used as a completion\nresults, and STDERR is completely silenced.\n\nTo be able to log and debug completion scripts and functions, you can use\n`TABTAB_DEBUG` environment variable. When defined, tabtab will redirect any\n`debug` output to the file specified.\n\n    export TABTAB_DEBUG=/tmp/tabtab.log\n\nTrigger a completion, and `tail -f /tmp/tabtab.log` to see debugging output.\n\nto be able to use the logger in your own completion, you can\n`require('tabtab/lib/debug')`. it is a thin wrapper on top of the debug module,\nand has the same api and behavior, except when `process.env.tabtab_debug` is\ndefined.\n\n```js\nconst debug = require('tabtab/lib/debug')('tabtab:name');\n```\n\n## CLI\n\ntabtab(1) - manage and discover completion on the user system.\n\nit provides utilities for installing a completion file, to discover and\nenable additional completion etc.\n\n    $ tabtab <command> [options]\n\n    Options:\n      -h, --help              Show this help output\n      -v, --version           Show package version\n      --name                  Binary name being completed\n      --auto                  Use default SHELL configuration file\n                              (~/.bashrc, ~/.zshrc or ~/.config/fish/config.fish)\n\n    Commands:\n\n      install                 Install and enable completion file on user system\n      uninstall               Undo the install command (only works with --auto)\n\n### tabtab install\n\n    $ tabtab install --help\n\n    options:\n      --stdout                outputs script to console and writes nothing\n      --name                  program name to complete\n      --completer             program that drives the completion (default: --name)\n\n\ntriggers the installation process and asks user for install location. `--name`\nif not defined, is determined from `package.json` name property. `--completer`\ncan be used to delegate the completion to another program. ex.\n\n    $ tabtab install --name bower --completer bower-complete\n\n`tabtab install` is not meant to be run directly, but rather used with your\n`package.json` scripts.\n\n### tabtab uninstall\n\n    $ tabtab uninstall --name binary-name\n\nattemps to uninstall a previous tabtab install by removing lines added by\n`tabtab install` in the SHELL specific config file (~/.bashrc, ~/.zshrc or\n~/.config/fish/config.fish).\n\nOnly works with `--auto` flag.\n\n## credits\n\nnpm does pretty amazing stuff with its completion feature. bash and zsh\nprovides command tab-completion, which allow you to complete the names\nof commands in your $path.  usually these functions means bash\nscripting, and in the case of npm, it is partially true.\n\nthere is a special `npm completion` command you may want to look around,\nif not already.\n\n    npm completion\n\nrunning this should dump [this\nscript](https://raw.github.com/isaacs/npm/caafb7323708e113d100e3e8145b949ed7a16c22/lib/utils/completion.sh)\nto the console. this script works with both bash/zsh and map the correct\ncompletion functions to the npm executable. these functions takes care\nof parsing the `comp_*` variables available when hitting tab to complete\na command, set them up as environment variables and run the `npm\ncompletion` command followed by `-- words` where words match value of\nthe command being completed.\n\nthis means that using this technique npm manage to perform bash/zsh\ncompletion using node and javascript. actually, the comprehensiveness of npm\ncompletion is quite amazing.\n\nthis whole package/module is based entirely on npm's code and @isaacs\nwork.\n\n---\n\n> [mit](./license) &nbsp;&middot;&nbsp;\n> [mkla.bz](http://mkla.bz) &nbsp;&middot;&nbsp;\n> [@mklabs](https://github.com/mklabs)\n",
  "readmeFilename": "readme.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/mklabs/node-tabtab.git"
  },
  "scripts": {
    "babel": "babel lib/ -d src/",
    "changelog": "standard-version -m '%s'",
    "prepublish": "npm run babel",
    "pretest": "npm run babel",
    "release": "standard-version -m '%s' && git push origin master --tags && npm publish",
    "test": "SHELL=zsh babel-node ./node_modules/.bin/mocha test",
    "watch": "watchd lib/* -c 'npm run babel'"
  },
  "version": "2.2.2"
}
