{
  "name": "redis-sentinel",
  "version": "0.0.6",
  "description": "Redis sentinel client for nodejs",
  "main": "index.js",
  "scripts": {
    "test": "mocha"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/ortoo/node-redis-sentinel.git"
  },
  "keywords": [
    "redis"
  ],
  "dependencies": {
    "redis": "0.8.3",
    "q": "0.9.2"
  },
  "devDependencies": {
    "mocha": "*",
    "chai": "*"
  },
  "author": {
    "name": "Ortoo Technologies"
  },
  "license": "MIT",
  "readmeFilename": "README.md",
  "gitHead": "289f89ee4dd1d675e33afc2bccf95fe483f39392",
  "readme": "node-redis-sentinel\n===================\n\nWrapper around [node_redis](https://github.com/mranney/node_redis) creating a client pointing at the master server which autoupdates when the master goes down.\n\n```javascript\nvar sentinel = require('redis-sentinel');\n\n// List the sentinel endpoints\nvar endpoints = [\n    {host: '127.0.0.1', port: 26379},\n    {host: '127.0.0.1', port: 26380}\n];\n\nvar opts = {}; // Standard node_redis client options\nvar masterName = 'mymaster';\n\n// masterName and opts are optional - masterName defaults to 'mymaster'\nvar redisClient = sentinel.createClient(endpoints, masterName, opts);\n\n// redisClient is a normal redis client, except that if the master goes down\n// it will keep checking the sentinels for a new master and then connect to that.\n// No need to monitor for reconnects etc - everything handled transparently\n// Anything that persists over the normal node_redis reconnect will persist here. \n// Anything that doesn't, won't.\n\n// An equivalent way of doing the above (if you don't want to have to pass the endpoints around all the time) is\nvar Sentinel = sentinel.Sentinel(endpoints);\nvar masterClient = Sentinel.createClient(masterName, opts);\n```\n\n## Connection to slaves or the sentinel itself ##\nYou can get a connection to a slave (chosen at random) or the first available sentinel from the endpoints by passing in the `role` attribute in the options. E.g.\n\n```javascript\n// The master is the default case if no role is specified.\nvar masterClient = sentinel.createClient(endpoints, masterName, {role: 'master'}); \nvar slaveClient = sentinel.createClient(endpoints, masterName, {role: 'slave'});\nvar sentinelClient = sentinel.createClient(endpoints, {role: 'sentinel'});\n```\n\nWhere you should also transparently get a reconnection to a new slave/sentinel if the existing one goes down.\n\n## TODO ##\n* Support for if the master changes but doesn't go down\n* We could probably be cleverer with reconnects etc. and there may be issues with the error handling\n\n## Licence ##\nMIT\n\n",
  "bugs": {
    "url": "https://github.com/ortoo/node-redis-sentinel/issues"
  },
  "homepage": "https://github.com/ortoo/node-redis-sentinel",
  "_id": "redis-sentinel@0.0.6",
  "_shasum": "2e54339d4558d5618d9bf4b063d8dec28b2d73f3",
  "_from": "redis-sentinel@0.0.x",
  "_resolved": "https://registry.npmjs.org/redis-sentinel/-/redis-sentinel-0.0.6.tgz"
}
