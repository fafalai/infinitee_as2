{
  "name": "primus-redis-rooms",
  "version": "0.3.1",
  "description": "Redis-based room system for Primus",
  "dependencies": {
    "redis": "0.9.x",
    "redis-sentinel": "0.0.x",
    "node-uuid": "~1.4.1"
  },
  "devDependencies": {
    "primus": "1.5.x",
    "ws": "0.4.x",
    "assert-called": "~0.1.2"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/mmalecki/primus-redis-rooms.git"
  },
  "scripts": {
    "test": "node test/simple-test.js && node test/lots-of-clients-test.js && node test/room-test.js && node test/one-client-test.js"
  },
  "main": "./lib/primus-redis-rooms.js",
  "license": "MIT",
  "readme": "# primus-redis-rooms\n[![Build Status](https://travis-ci.org/mmalecki/primus-redis-rooms.png?branch=master)](https://travis-ci.org/mmalecki/primus-redis-rooms)\n\n`primus-redis-rooms` is a Redis store for [Primus](https://github.com/primus/primus)\nand [`primus-rooms`](https://github.com/cayasso/primus-rooms).\n\nIt takes care of distributing messages to other instances using [Redis Pub/Sub](http://redis.io/topics/pubsub).\n\nSo, you can have client `A` connected to server `X` in room `foo` and have\nserver `Y` emit messages to `foo` and client `A` will receive them. Magic.\n\n## Usage\n\n### Single Redis instance\nYou can use `primus-redis-rooms` with a single Redis instance, but it's not\nrecommended in production environment, since it makes Redis a single point of\nfailure.\n\n\n```js\nvar http = require('http'),\n    Primus = require('primus'),\n    PrimusRedis = require('primus-redis-rooms');\n\nvar server = http.createServer();\nvar primus = new Primus(server, {\n  redis: {\n    host: 'localhost',\n    port: 6379,\n    channel: 'primus' // Optional, defaults to `'primus`'\n  },\n  transformer: 'websockets'\n});\nprimus.use('redis', PrimusRedis);\n\n//\n// This'll take care of sending the message to all clients in room called\n// `our-room`.\n//\nprimus.room('our-room').write('Hello world!');\n```\n\n### Sentinel\n[Redis Sentinel](http://redis.io/topics/sentinel) is a failover mechanism\nbuilt into Redis.\n\nWhen using Sentinel, Redis client will automatically reconnect to new master\nserver when current one goes down.\n\n```js\nvar http = require('http'),\n    Primus = require('primus'),\n    PrimusRedis = require('primus-redis-rooms');\n\nvar server = http.createServer();\nvar primus = new Primus(server, {\n  redis: {\n    sentinel: true,\n    endpoints: [\n      { host: 'localhost', port: 26379 },\n      { host: 'localhost', port: 26380 },\n      { host: 'localhost', port: 26381 }\n    ],\n    masterName: 'mymaster'\n    channel: 'primus' // Optional, defaults to `'primus`'\n  },\n  transformer: 'websockets'\n});\nprimus.use('redis', PrimusRedis);\n```\n\n## Changes\n\n### 0.2 -> 0.3\n\n* Wire format change - data is no longer written to clients as `{ room: \"foo\",\n  data: { our: \"bar\" } }`, only actual data is sent (`{ our: \"bar\" }` in this\n  case).\n\n\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/mmalecki/primus-redis-rooms/issues"
  },
  "homepage": "https://github.com/mmalecki/primus-redis-rooms",
  "_id": "primus-redis-rooms@0.3.1",
  "_shasum": "5849a699c6403677772cc5cd09d1ba4b4d9c2d74",
  "_from": "primus-redis-rooms@",
  "_resolved": "https://registry.npmjs.org/primus-redis-rooms/-/primus-redis-rooms-0.3.1.tgz"
}
